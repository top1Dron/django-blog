INFO 2021-05-25 15:38:23,322 views <tr><th><label for="id_body">Body:</label></th><td><ul class="errorlist"><li>This field is required.</li></ul><textarea name="body" cols="40" rows="10" name="editordata" id="id_body" hidden="true">
</textarea><script>
function initSummernote_id_body() {
    $(document).ready(function($) {

        var origin = window.document.getElementById('id_body');
        var csrftoken = getCookie('csrftoken');
        var settings = {"height": "200", "codemirror": {"mode": "htmlmixed", "lineNumbers": "true", "theme": "monokai"}, "toolbar": [["color", ["color"]], ["para", ["ul", "ol", "paragraph"]], ["insert", ["link", "picture", "video"]], ["view", ["fullscreen", "codeview", "help"]]], "width": 720, "lang": "en-US", "url": {"language": "/static/summernote/lang/summernote-en-US.min.js", "upload_attachment": "/summernote/upload_attachment/"}};
        var $sn = $(origin);

        $sn.html(origin.value);
        var $nEditor, $nCodable, $nImageInput;
        $(origin).hide();

        function recalcHeight(e) {
            var nEditable = e.find('.note-editable');
            var nEditor = $('.note-editor');
            var height = parseInt(
                parseInt(settings.height)  // default
                - e.find('.note-toolbar').outerHeight()
                - e.find('.note-status-output').outerHeight()
                - e.find('.note-statusbar').outerHeight()
                - (nEditor.outerHeight() - nEditor.innerHeight())  // editor's border
            );
            nEditable.outerHeight(height);
        }
        
        var initEditor = function() {
            $sn.summernote($.extend(settings, {

                callbacks: {
                    onInit: function() {
                        $nEditor = $sn.next();
                        $nCodable = $nEditor.find('.note-codable');
                        recalcHeight($nEditor);


                        // Apply attributes with wrapper div
                        var $wrap = $($nEditor).wrap(
                            '<div class="summernote-div"></div>'
                        ).parent();
                        
                        $wrap.attr('cols', '40');
                        
                        $wrap.attr('rows', '10');
                        
                        $wrap.attr('name', 'editordata');
                        


                        // Move dropdown dialog when it exceeds the bound of the editor
                        $nEditor.find('.note-btn-group').on('shown.bs.dropdown', function () {
                            var nDropdown = $(this).find(".dropdown-menu");
                            var offset = nDropdown.offset();
                            var width = nDropdown.width();

                            var windowWidth = $(window).width();
                            var margin = 15;

                            if( offset.left + width + margin > windowWidth ) {
                                var left = windowWidth - width - offset.left - margin;
                                nDropdown.css("left", left + "px");
                            }
                        });
                    },
                    onBlur: function() {
                        origin.value = $sn.summernote('code');
                    },
                    onBlurCodeview: function() {
                        origin.value = $sn.summernote('code');
                    },
                    
                    onImageUpload: function(files) {
                        // custom attachment data
                        var attachmentData = origin.dataset;
                        $nImageInput = $nEditor.find('.note-image-input');
                        $nImageInput.fileupload();
                        var jqXHR = $nImageInput.fileupload('send', 
                            {
                                files: files,
                                formData: $.extend({csrfmiddlewaretoken: csrftoken}, attachmentData),
                                url: settings.url.upload_attachment,
                            })
                            .done(function (data, textStatus, jqXHR) {
                                $.each(data.files, function (index, file) {
                                    $sn.summernote("insertImage", file.url);
                                });
                            })
                            .fail(function (jqXHR, textStatus, errorThrown) {
                                // if the error message from the server has any text in it, show it
                                var msg = jqXHR.responseJSON;
                                if (msg && msg.message) {
                                    alert(msg.message);
                                }
                                // otherwise, show something generic
                                else {
                                    alert('Got an error while uploading images.');
                                }
                            });
                        // Summernote will replace ImageInput when next the dialog opens.
                        // But we have to reset it to prevent additional uploading by form itself.
                        $nImageInput.replaceWith($nImageInput.val('').clone(true));
                    }
                    
                }
            }));
        };

        // include summernote language pack, synchronously
        $.ajax({url: settings.url.language, dataType: "script", complete: initEditor})

        // For CodeMirror
        $sn.on('summernote.codeview.toggled', function() {
            var cmEditor = $nCodable.data('cmEditor');
            if( cmEditor ) {
                cmEditor.on('blur', function() {
                    origin.value = cmEditor.getValue();
                });
            }
        });


        // See https://docs.djangoproject.com/en/dev/ref/contrib/csrf/#ajax
        function getCookie(name) {
            var cookieValue = null;
            if (document.cookie && document.cookie != '') {
                var cookies = document.cookie.split(';');
                for (var i = 0; i < cookies.length; i++) {
                    var cookie = jQuery.trim(cookies[i]);
                    // Does this cookie string begin with the name we want?
                    if (cookie.substring(0, name.length + 1) == (name + '=')) {
                        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                        break;
                    }
                }
            }
            return cookieValue;
        }

    });
}
</script>

<script>

    initSummernote_id_body();

</script>
</td></tr>
INFO 2021-05-25 15:38:23,383 views <QueryDict: {'csrfmiddlewaretoken': ['KqKJ0HKNJUKzHtWGfrXJlg3ezvEiHFnuye92B2g1fAK32aJKT4qVyUdkEebRSb42'], 'body': ['<p><br></p>'], 'files': ['']}>
INFO 2021-05-25 15:38:44,127 views <tr><th><label for="id_body">Body:</label></th><td><ul class="errorlist"><li>This field is required.</li></ul><textarea name="body" cols="40" rows="10" name="editordata" id="id_body" hidden="true">
</textarea><script>
function initSummernote_id_body() {
    $(document).ready(function($) {

        var origin = window.document.getElementById('id_body');
        var csrftoken = getCookie('csrftoken');
        var settings = {"height": "200", "codemirror": {"mode": "htmlmixed", "lineNumbers": "true", "theme": "monokai"}, "toolbar": [["fontname", ["fontname"]], ["color", ["color"]], ["para", ["ul", "ol", "paragraph"]], ["insert", ["link", "picture", "video"]], ["view", ["fullscreen", "codeview", "help"]]], "width": 720, "lang": "en-US", "url": {"language": "/static/summernote/lang/summernote-en-US.min.js", "upload_attachment": "/summernote/upload_attachment/"}};
        var $sn = $(origin);

        $sn.html(origin.value);
        var $nEditor, $nCodable, $nImageInput;
        $(origin).hide();

        function recalcHeight(e) {
            var nEditable = e.find('.note-editable');
            var nEditor = $('.note-editor');
            var height = parseInt(
                parseInt(settings.height)  // default
                - e.find('.note-toolbar').outerHeight()
                - e.find('.note-status-output').outerHeight()
                - e.find('.note-statusbar').outerHeight()
                - (nEditor.outerHeight() - nEditor.innerHeight())  // editor's border
            );
            nEditable.outerHeight(height);
        }
        
        var initEditor = function() {
            $sn.summernote($.extend(settings, {

                callbacks: {
                    onInit: function() {
                        $nEditor = $sn.next();
                        $nCodable = $nEditor.find('.note-codable');
                        recalcHeight($nEditor);


                        // Apply attributes with wrapper div
                        var $wrap = $($nEditor).wrap(
                            '<div class="summernote-div"></div>'
                        ).parent();
                        
                        $wrap.attr('cols', '40');
                        
                        $wrap.attr('rows', '10');
                        
                        $wrap.attr('name', 'editordata');
                        


                        // Move dropdown dialog when it exceeds the bound of the editor
                        $nEditor.find('.note-btn-group').on('shown.bs.dropdown', function () {
                            var nDropdown = $(this).find(".dropdown-menu");
                            var offset = nDropdown.offset();
                            var width = nDropdown.width();

                            var windowWidth = $(window).width();
                            var margin = 15;

                            if( offset.left + width + margin > windowWidth ) {
                                var left = windowWidth - width - offset.left - margin;
                                nDropdown.css("left", left + "px");
                            }
                        });
                    },
                    onBlur: function() {
                        origin.value = $sn.summernote('code');
                    },
                    onBlurCodeview: function() {
                        origin.value = $sn.summernote('code');
                    },
                    
                    onImageUpload: function(files) {
                        // custom attachment data
                        var attachmentData = origin.dataset;
                        $nImageInput = $nEditor.find('.note-image-input');
                        $nImageInput.fileupload();
                        var jqXHR = $nImageInput.fileupload('send', 
                            {
                                files: files,
                                formData: $.extend({csrfmiddlewaretoken: csrftoken}, attachmentData),
                                url: settings.url.upload_attachment,
                            })
                            .done(function (data, textStatus, jqXHR) {
                                $.each(data.files, function (index, file) {
                                    $sn.summernote("insertImage", file.url);
                                });
                            })
                            .fail(function (jqXHR, textStatus, errorThrown) {
                                // if the error message from the server has any text in it, show it
                                var msg = jqXHR.responseJSON;
                                if (msg && msg.message) {
                                    alert(msg.message);
                                }
                                // otherwise, show something generic
                                else {
                                    alert('Got an error while uploading images.');
                                }
                            });
                        // Summernote will replace ImageInput when next the dialog opens.
                        // But we have to reset it to prevent additional uploading by form itself.
                        $nImageInput.replaceWith($nImageInput.val('').clone(true));
                    }
                    
                }
            }));
        };

        // include summernote language pack, synchronously
        $.ajax({url: settings.url.language, dataType: "script", complete: initEditor})

        // For CodeMirror
        $sn.on('summernote.codeview.toggled', function() {
            var cmEditor = $nCodable.data('cmEditor');
            if( cmEditor ) {
                cmEditor.on('blur', function() {
                    origin.value = cmEditor.getValue();
                });
            }
        });


        // See https://docs.djangoproject.com/en/dev/ref/contrib/csrf/#ajax
        function getCookie(name) {
            var cookieValue = null;
            if (document.cookie && document.cookie != '') {
                var cookies = document.cookie.split(';');
                for (var i = 0; i < cookies.length; i++) {
                    var cookie = jQuery.trim(cookies[i]);
                    // Does this cookie string begin with the name we want?
                    if (cookie.substring(0, name.length + 1) == (name + '=')) {
                        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                        break;
                    }
                }
            }
            return cookieValue;
        }

    });
}
</script>

<script>

    initSummernote_id_body();

</script>
</td></tr>
INFO 2021-05-25 15:38:44,200 views <QueryDict: {'csrfmiddlewaretoken': ['KqKJ0HKNJUKzHtWGfrXJlg3ezvEiHFnuye92B2g1fAK32aJKT4qVyUdkEebRSb42'], 'body': ['<p><br></p>'], 'files': ['']}>
INFO 2021-05-25 15:39:01,921 views <tr><th><label for="id_body">Body:</label></th><td><ul class="errorlist"><li>This field is required.</li></ul><textarea name="body" cols="40" rows="10" name="editordata" id="id_body" hidden="true">
</textarea><script>
function initSummernote_id_body() {
    $(document).ready(function($) {

        var origin = window.document.getElementById('id_body');
        var csrftoken = getCookie('csrftoken');
        var settings = {"height": "200", "codemirror": {"mode": "htmlmixed", "lineNumbers": "true", "theme": "monokai"}, "toolbar": [["font", ["bold", "underline", "clear"]], ["color", ["color"]], ["para", ["ul", "ol", "paragraph"]], ["insert", ["link", "picture", "video"]], ["view", ["fullscreen", "codeview", "help"]]], "width": 720, "lang": "en-US", "url": {"language": "/static/summernote/lang/summernote-en-US.min.js", "upload_attachment": "/summernote/upload_attachment/"}};
        var $sn = $(origin);

        $sn.html(origin.value);
        var $nEditor, $nCodable, $nImageInput;
        $(origin).hide();

        function recalcHeight(e) {
            var nEditable = e.find('.note-editable');
            var nEditor = $('.note-editor');
            var height = parseInt(
                parseInt(settings.height)  // default
                - e.find('.note-toolbar').outerHeight()
                - e.find('.note-status-output').outerHeight()
                - e.find('.note-statusbar').outerHeight()
                - (nEditor.outerHeight() - nEditor.innerHeight())  // editor's border
            );
            nEditable.outerHeight(height);
        }
        
        var initEditor = function() {
            $sn.summernote($.extend(settings, {

                callbacks: {
                    onInit: function() {
                        $nEditor = $sn.next();
                        $nCodable = $nEditor.find('.note-codable');
                        recalcHeight($nEditor);


                        // Apply attributes with wrapper div
                        var $wrap = $($nEditor).wrap(
                            '<div class="summernote-div"></div>'
                        ).parent();
                        
                        $wrap.attr('cols', '40');
                        
                        $wrap.attr('rows', '10');
                        
                        $wrap.attr('name', 'editordata');
                        


                        // Move dropdown dialog when it exceeds the bound of the editor
                        $nEditor.find('.note-btn-group').on('shown.bs.dropdown', function () {
                            var nDropdown = $(this).find(".dropdown-menu");
                            var offset = nDropdown.offset();
                            var width = nDropdown.width();

                            var windowWidth = $(window).width();
                            var margin = 15;

                            if( offset.left + width + margin > windowWidth ) {
                                var left = windowWidth - width - offset.left - margin;
                                nDropdown.css("left", left + "px");
                            }
                        });
                    },
                    onBlur: function() {
                        origin.value = $sn.summernote('code');
                    },
                    onBlurCodeview: function() {
                        origin.value = $sn.summernote('code');
                    },
                    
                    onImageUpload: function(files) {
                        // custom attachment data
                        var attachmentData = origin.dataset;
                        $nImageInput = $nEditor.find('.note-image-input');
                        $nImageInput.fileupload();
                        var jqXHR = $nImageInput.fileupload('send', 
                            {
                                files: files,
                                formData: $.extend({csrfmiddlewaretoken: csrftoken}, attachmentData),
                                url: settings.url.upload_attachment,
                            })
                            .done(function (data, textStatus, jqXHR) {
                                $.each(data.files, function (index, file) {
                                    $sn.summernote("insertImage", file.url);
                                });
                            })
                            .fail(function (jqXHR, textStatus, errorThrown) {
                                // if the error message from the server has any text in it, show it
                                var msg = jqXHR.responseJSON;
                                if (msg && msg.message) {
                                    alert(msg.message);
                                }
                                // otherwise, show something generic
                                else {
                                    alert('Got an error while uploading images.');
                                }
                            });
                        // Summernote will replace ImageInput when next the dialog opens.
                        // But we have to reset it to prevent additional uploading by form itself.
                        $nImageInput.replaceWith($nImageInput.val('').clone(true));
                    }
                    
                }
            }));
        };

        // include summernote language pack, synchronously
        $.ajax({url: settings.url.language, dataType: "script", complete: initEditor})

        // For CodeMirror
        $sn.on('summernote.codeview.toggled', function() {
            var cmEditor = $nCodable.data('cmEditor');
            if( cmEditor ) {
                cmEditor.on('blur', function() {
                    origin.value = cmEditor.getValue();
                });
            }
        });


        // See https://docs.djangoproject.com/en/dev/ref/contrib/csrf/#ajax
        function getCookie(name) {
            var cookieValue = null;
            if (document.cookie && document.cookie != '') {
                var cookies = document.cookie.split(';');
                for (var i = 0; i < cookies.length; i++) {
                    var cookie = jQuery.trim(cookies[i]);
                    // Does this cookie string begin with the name we want?
                    if (cookie.substring(0, name.length + 1) == (name + '=')) {
                        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                        break;
                    }
                }
            }
            return cookieValue;
        }

    });
}
</script>

<script>

    initSummernote_id_body();

</script>
</td></tr>
INFO 2021-05-25 15:39:01,976 views <QueryDict: {'csrfmiddlewaretoken': ['KqKJ0HKNJUKzHtWGfrXJlg3ezvEiHFnuye92B2g1fAK32aJKT4qVyUdkEebRSb42'], 'body': ['<p><br></p>'], 'files': ['']}>
INFO 2021-05-25 15:39:19,241 views <tr><th><label for="id_body">Body:</label></th><td><ul class="errorlist"><li>This field is required.</li></ul><textarea name="body" cols="40" rows="10" name="editordata" id="id_body" hidden="true">
</textarea><script>
function initSummernote_id_body() {
    $(document).ready(function($) {

        var origin = window.document.getElementById('id_body');
        var csrftoken = getCookie('csrftoken');
        var settings = {"height": "200", "codemirror": {"mode": "htmlmixed", "lineNumbers": "true", "theme": "monokai"}, "toolbar": [["style", ["style"]], ["font", ["bold", "underline", "clear"]], ["color", ["color"]], ["para", ["ul", "ol", "paragraph"]], ["insert", ["link", "picture", "video"]], ["view", ["fullscreen", "codeview", "help"]]], "width": 720, "lang": "en-US", "url": {"language": "/static/summernote/lang/summernote-en-US.min.js", "upload_attachment": "/summernote/upload_attachment/"}};
        var $sn = $(origin);

        $sn.html(origin.value);
        var $nEditor, $nCodable, $nImageInput;
        $(origin).hide();

        function recalcHeight(e) {
            var nEditable = e.find('.note-editable');
            var nEditor = $('.note-editor');
            var height = parseInt(
                parseInt(settings.height)  // default
                - e.find('.note-toolbar').outerHeight()
                - e.find('.note-status-output').outerHeight()
                - e.find('.note-statusbar').outerHeight()
                - (nEditor.outerHeight() - nEditor.innerHeight())  // editor's border
            );
            nEditable.outerHeight(height);
        }
        
        var initEditor = function() {
            $sn.summernote($.extend(settings, {

                callbacks: {
                    onInit: function() {
                        $nEditor = $sn.next();
                        $nCodable = $nEditor.find('.note-codable');
                        recalcHeight($nEditor);


                        // Apply attributes with wrapper div
                        var $wrap = $($nEditor).wrap(
                            '<div class="summernote-div"></div>'
                        ).parent();
                        
                        $wrap.attr('cols', '40');
                        
                        $wrap.attr('rows', '10');
                        
                        $wrap.attr('name', 'editordata');
                        


                        // Move dropdown dialog when it exceeds the bound of the editor
                        $nEditor.find('.note-btn-group').on('shown.bs.dropdown', function () {
                            var nDropdown = $(this).find(".dropdown-menu");
                            var offset = nDropdown.offset();
                            var width = nDropdown.width();

                            var windowWidth = $(window).width();
                            var margin = 15;

                            if( offset.left + width + margin > windowWidth ) {
                                var left = windowWidth - width - offset.left - margin;
                                nDropdown.css("left", left + "px");
                            }
                        });
                    },
                    onBlur: function() {
                        origin.value = $sn.summernote('code');
                    },
                    onBlurCodeview: function() {
                        origin.value = $sn.summernote('code');
                    },
                    
                    onImageUpload: function(files) {
                        // custom attachment data
                        var attachmentData = origin.dataset;
                        $nImageInput = $nEditor.find('.note-image-input');
                        $nImageInput.fileupload();
                        var jqXHR = $nImageInput.fileupload('send', 
                            {
                                files: files,
                                formData: $.extend({csrfmiddlewaretoken: csrftoken}, attachmentData),
                                url: settings.url.upload_attachment,
                            })
                            .done(function (data, textStatus, jqXHR) {
                                $.each(data.files, function (index, file) {
                                    $sn.summernote("insertImage", file.url);
                                });
                            })
                            .fail(function (jqXHR, textStatus, errorThrown) {
                                // if the error message from the server has any text in it, show it
                                var msg = jqXHR.responseJSON;
                                if (msg && msg.message) {
                                    alert(msg.message);
                                }
                                // otherwise, show something generic
                                else {
                                    alert('Got an error while uploading images.');
                                }
                            });
                        // Summernote will replace ImageInput when next the dialog opens.
                        // But we have to reset it to prevent additional uploading by form itself.
                        $nImageInput.replaceWith($nImageInput.val('').clone(true));
                    }
                    
                }
            }));
        };

        // include summernote language pack, synchronously
        $.ajax({url: settings.url.language, dataType: "script", complete: initEditor})

        // For CodeMirror
        $sn.on('summernote.codeview.toggled', function() {
            var cmEditor = $nCodable.data('cmEditor');
            if( cmEditor ) {
                cmEditor.on('blur', function() {
                    origin.value = cmEditor.getValue();
                });
            }
        });


        // See https://docs.djangoproject.com/en/dev/ref/contrib/csrf/#ajax
        function getCookie(name) {
            var cookieValue = null;
            if (document.cookie && document.cookie != '') {
                var cookies = document.cookie.split(';');
                for (var i = 0; i < cookies.length; i++) {
                    var cookie = jQuery.trim(cookies[i]);
                    // Does this cookie string begin with the name we want?
                    if (cookie.substring(0, name.length + 1) == (name + '=')) {
                        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                        break;
                    }
                }
            }
            return cookieValue;
        }

    });
}
</script>

<script>

    initSummernote_id_body();

</script>
</td></tr>
INFO 2021-05-25 15:39:19,297 views <QueryDict: {'csrfmiddlewaretoken': ['KqKJ0HKNJUKzHtWGfrXJlg3ezvEiHFnuye92B2g1fAK32aJKT4qVyUdkEebRSb42'], 'body': ['<p><br></p>'], 'files': ['']}>
INFO 2021-05-25 15:40:09,981 views <tr><th><label for="id_body">Body:</label></th><td><ul class="errorlist"><li>This field is required.</li></ul><textarea name="body" cols="40" rows="10" name="editordata" id="id_body" hidden="true">
</textarea><script>
function initSummernote_id_body() {
    $(document).ready(function($) {

        var origin = window.document.getElementById('id_body');
        var csrftoken = getCookie('csrftoken');
        var settings = {"height": "200", "codemirror": {"mode": "htmlmixed", "lineNumbers": "true", "theme": "monokai"}, "toolbar": [["font", ["bold", "underline", "clear"]], ["color", ["color"]], ["para", ["ul", "ol"]], ["insert", ["link", "picture", "video"]], ["view", ["fullscreen", "codeview", "help"]]], "width": 720, "lang": "en-US", "url": {"language": "/static/summernote/lang/summernote-en-US.min.js", "upload_attachment": "/summernote/upload_attachment/"}};
        var $sn = $(origin);

        $sn.html(origin.value);
        var $nEditor, $nCodable, $nImageInput;
        $(origin).hide();

        function recalcHeight(e) {
            var nEditable = e.find('.note-editable');
            var nEditor = $('.note-editor');
            var height = parseInt(
                parseInt(settings.height)  // default
                - e.find('.note-toolbar').outerHeight()
                - e.find('.note-status-output').outerHeight()
                - e.find('.note-statusbar').outerHeight()
                - (nEditor.outerHeight() - nEditor.innerHeight())  // editor's border
            );
            nEditable.outerHeight(height);
        }
        
        var initEditor = function() {
            $sn.summernote($.extend(settings, {

                callbacks: {
                    onInit: function() {
                        $nEditor = $sn.next();
                        $nCodable = $nEditor.find('.note-codable');
                        recalcHeight($nEditor);


                        // Apply attributes with wrapper div
                        var $wrap = $($nEditor).wrap(
                            '<div class="summernote-div"></div>'
                        ).parent();
                        
                        $wrap.attr('cols', '40');
                        
                        $wrap.attr('rows', '10');
                        
                        $wrap.attr('name', 'editordata');
                        


                        // Move dropdown dialog when it exceeds the bound of the editor
                        $nEditor.find('.note-btn-group').on('shown.bs.dropdown', function () {
                            var nDropdown = $(this).find(".dropdown-menu");
                            var offset = nDropdown.offset();
                            var width = nDropdown.width();

                            var windowWidth = $(window).width();
                            var margin = 15;

                            if( offset.left + width + margin > windowWidth ) {
                                var left = windowWidth - width - offset.left - margin;
                                nDropdown.css("left", left + "px");
                            }
                        });
                    },
                    onBlur: function() {
                        origin.value = $sn.summernote('code');
                    },
                    onBlurCodeview: function() {
                        origin.value = $sn.summernote('code');
                    },
                    
                    onImageUpload: function(files) {
                        // custom attachment data
                        var attachmentData = origin.dataset;
                        $nImageInput = $nEditor.find('.note-image-input');
                        $nImageInput.fileupload();
                        var jqXHR = $nImageInput.fileupload('send', 
                            {
                                files: files,
                                formData: $.extend({csrfmiddlewaretoken: csrftoken}, attachmentData),
                                url: settings.url.upload_attachment,
                            })
                            .done(function (data, textStatus, jqXHR) {
                                $.each(data.files, function (index, file) {
                                    $sn.summernote("insertImage", file.url);
                                });
                            })
                            .fail(function (jqXHR, textStatus, errorThrown) {
                                // if the error message from the server has any text in it, show it
                                var msg = jqXHR.responseJSON;
                                if (msg && msg.message) {
                                    alert(msg.message);
                                }
                                // otherwise, show something generic
                                else {
                                    alert('Got an error while uploading images.');
                                }
                            });
                        // Summernote will replace ImageInput when next the dialog opens.
                        // But we have to reset it to prevent additional uploading by form itself.
                        $nImageInput.replaceWith($nImageInput.val('').clone(true));
                    }
                    
                }
            }));
        };

        // include summernote language pack, synchronously
        $.ajax({url: settings.url.language, dataType: "script", complete: initEditor})

        // For CodeMirror
        $sn.on('summernote.codeview.toggled', function() {
            var cmEditor = $nCodable.data('cmEditor');
            if( cmEditor ) {
                cmEditor.on('blur', function() {
                    origin.value = cmEditor.getValue();
                });
            }
        });


        // See https://docs.djangoproject.com/en/dev/ref/contrib/csrf/#ajax
        function getCookie(name) {
            var cookieValue = null;
            if (document.cookie && document.cookie != '') {
                var cookies = document.cookie.split(';');
                for (var i = 0; i < cookies.length; i++) {
                    var cookie = jQuery.trim(cookies[i]);
                    // Does this cookie string begin with the name we want?
                    if (cookie.substring(0, name.length + 1) == (name + '=')) {
                        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                        break;
                    }
                }
            }
            return cookieValue;
        }

    });
}
</script>

<script>

    initSummernote_id_body();

</script>
</td></tr>
INFO 2021-05-25 15:40:10,073 views <QueryDict: {'csrfmiddlewaretoken': ['KqKJ0HKNJUKzHtWGfrXJlg3ezvEiHFnuye92B2g1fAK32aJKT4qVyUdkEebRSb42'], 'body': ['<p><br></p>'], 'files': ['']}>
INFO 2021-05-25 15:40:49,261 views <tr><th><label for="id_body">Body:</label></th><td><textarea name="body" cols="40" rows="10" name="editordata" id="id_body" hidden="true">
&lt;p&gt;dsad&lt;/p&gt;&lt;p&gt;sad&lt;/p&gt;&lt;p&gt;sad&lt;/p&gt;&lt;p&gt;sad&lt;/p&gt;&lt;p&gt;sa&lt;/p&gt;&lt;p&gt;d&lt;/p&gt;&lt;p&gt;sa&lt;/p&gt;&lt;p&gt;d&lt;/p&gt;</textarea><script>
function initSummernote_id_body() {
    $(document).ready(function($) {

        var origin = window.document.getElementById('id_body');
        var csrftoken = getCookie('csrftoken');
        var settings = {"height": "200", "codemirror": {"mode": "htmlmixed", "lineNumbers": "true", "theme": "monokai"}, "toolbar": [["font", ["bold", "underline", "clear"]], ["color", ["color"]], ["para", ["ul", "ol"]], ["insert", ["link", "picture", "video"]], ["view", ["fullscreen", "codeview", "help"]]], "width": 720, "lang": "en-US", "url": {"language": "/static/summernote/lang/summernote-en-US.min.js", "upload_attachment": "/summernote/upload_attachment/"}};
        var $sn = $(origin);

        $sn.html(origin.value);
        var $nEditor, $nCodable, $nImageInput;
        $(origin).hide();

        function recalcHeight(e) {
            var nEditable = e.find('.note-editable');
            var nEditor = $('.note-editor');
            var height = parseInt(
                parseInt(settings.height)  // default
                - e.find('.note-toolbar').outerHeight()
                - e.find('.note-status-output').outerHeight()
                - e.find('.note-statusbar').outerHeight()
                - (nEditor.outerHeight() - nEditor.innerHeight())  // editor's border
            );
            nEditable.outerHeight(height);
        }
        
        var initEditor = function() {
            $sn.summernote($.extend(settings, {

                callbacks: {
                    onInit: function() {
                        $nEditor = $sn.next();
                        $nCodable = $nEditor.find('.note-codable');
                        recalcHeight($nEditor);


                        // Apply attributes with wrapper div
                        var $wrap = $($nEditor).wrap(
                            '<div class="summernote-div"></div>'
                        ).parent();
                        
                        $wrap.attr('cols', '40');
                        
                        $wrap.attr('rows', '10');
                        
                        $wrap.attr('name', 'editordata');
                        


                        // Move dropdown dialog when it exceeds the bound of the editor
                        $nEditor.find('.note-btn-group').on('shown.bs.dropdown', function () {
                            var nDropdown = $(this).find(".dropdown-menu");
                            var offset = nDropdown.offset();
                            var width = nDropdown.width();

                            var windowWidth = $(window).width();
                            var margin = 15;

                            if( offset.left + width + margin > windowWidth ) {
                                var left = windowWidth - width - offset.left - margin;
                                nDropdown.css("left", left + "px");
                            }
                        });
                    },
                    onBlur: function() {
                        origin.value = $sn.summernote('code');
                    },
                    onBlurCodeview: function() {
                        origin.value = $sn.summernote('code');
                    },
                    
                    onImageUpload: function(files) {
                        // custom attachment data
                        var attachmentData = origin.dataset;
                        $nImageInput = $nEditor.find('.note-image-input');
                        $nImageInput.fileupload();
                        var jqXHR = $nImageInput.fileupload('send', 
                            {
                                files: files,
                                formData: $.extend({csrfmiddlewaretoken: csrftoken}, attachmentData),
                                url: settings.url.upload_attachment,
                            })
                            .done(function (data, textStatus, jqXHR) {
                                $.each(data.files, function (index, file) {
                                    $sn.summernote("insertImage", file.url);
                                });
                            })
                            .fail(function (jqXHR, textStatus, errorThrown) {
                                // if the error message from the server has any text in it, show it
                                var msg = jqXHR.responseJSON;
                                if (msg && msg.message) {
                                    alert(msg.message);
                                }
                                // otherwise, show something generic
                                else {
                                    alert('Got an error while uploading images.');
                                }
                            });
                        // Summernote will replace ImageInput when next the dialog opens.
                        // But we have to reset it to prevent additional uploading by form itself.
                        $nImageInput.replaceWith($nImageInput.val('').clone(true));
                    }
                    
                }
            }));
        };

        // include summernote language pack, synchronously
        $.ajax({url: settings.url.language, dataType: "script", complete: initEditor})

        // For CodeMirror
        $sn.on('summernote.codeview.toggled', function() {
            var cmEditor = $nCodable.data('cmEditor');
            if( cmEditor ) {
                cmEditor.on('blur', function() {
                    origin.value = cmEditor.getValue();
                });
            }
        });


        // See https://docs.djangoproject.com/en/dev/ref/contrib/csrf/#ajax
        function getCookie(name) {
            var cookieValue = null;
            if (document.cookie && document.cookie != '') {
                var cookies = document.cookie.split(';');
                for (var i = 0; i < cookies.length; i++) {
                    var cookie = jQuery.trim(cookies[i]);
                    // Does this cookie string begin with the name we want?
                    if (cookie.substring(0, name.length + 1) == (name + '=')) {
                        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                        break;
                    }
                }
            }
            return cookieValue;
        }

    });
}
</script>

<script>

    initSummernote_id_body();

</script>
</td></tr>
INFO 2021-05-25 15:40:49,337 views <QueryDict: {'csrfmiddlewaretoken': ['jF0zEmEra5KritUt6AD2pKz2YrQ6tbLx7tpSfHaFGLKVDaHxKd6eCoJ83anFEHs5'], 'body': ['<p>dsad</p><p>sad</p><p>sad</p><p>sad</p><p>sa</p><p>d</p><p>sa</p><p>d</p>'], 'files': ['']}>
INFO 2021-05-25 15:41:55,257 views <tr><th><label for="id_body">Body:</label></th><td><textarea name="body" cols="40" rows="10" name="editordata" id="id_body" hidden="true">
&lt;p&gt;dsad&lt;/p&gt;&lt;p&gt;sad&lt;/p&gt;&lt;p&gt;sad&lt;/p&gt;&lt;p&gt;sad&lt;/p&gt;&lt;p&gt;sa&lt;/p&gt;&lt;p&gt;d&lt;/p&gt;&lt;p&gt;sa&lt;/p&gt;&lt;p&gt;d&lt;/p&gt;</textarea><script>
function initSummernote_id_body() {
    $(document).ready(function($) {

        var origin = window.document.getElementById('id_body');
        var csrftoken = getCookie('csrftoken');
        var settings = {"height": "200", "codemirror": {"mode": "htmlmixed", "lineNumbers": "true", "theme": "monokai"}, "toolbar": [["font", ["bold", "underline", "clear"]], ["color", ["color"]], ["para", ["ul", "ol"]], ["insert", ["link", "picture", "video"]], ["view", ["fullscreen", "codeview", "help"]]], "width": 720, "lang": "en-US", "url": {"language": "/static/summernote/lang/summernote-en-US.min.js", "upload_attachment": "/summernote/upload_attachment/"}};
        var $sn = $(origin);

        $sn.html(origin.value);
        var $nEditor, $nCodable, $nImageInput;
        $(origin).hide();

        function recalcHeight(e) {
            var nEditable = e.find('.note-editable');
            var nEditor = $('.note-editor');
            var height = parseInt(
                parseInt(settings.height)  // default
                - e.find('.note-toolbar').outerHeight()
                - e.find('.note-status-output').outerHeight()
                - e.find('.note-statusbar').outerHeight()
                - (nEditor.outerHeight() - nEditor.innerHeight())  // editor's border
            );
            nEditable.outerHeight(height);
        }
        
        var initEditor = function() {
            $sn.summernote($.extend(settings, {

                callbacks: {
                    onInit: function() {
                        $nEditor = $sn.next();
                        $nCodable = $nEditor.find('.note-codable');
                        recalcHeight($nEditor);


                        // Apply attributes with wrapper div
                        var $wrap = $($nEditor).wrap(
                            '<div class="summernote-div"></div>'
                        ).parent();
                        
                        $wrap.attr('cols', '40');
                        
                        $wrap.attr('rows', '10');
                        
                        $wrap.attr('name', 'editordata');
                        


                        // Move dropdown dialog when it exceeds the bound of the editor
                        $nEditor.find('.note-btn-group').on('shown.bs.dropdown', function () {
                            var nDropdown = $(this).find(".dropdown-menu");
                            var offset = nDropdown.offset();
                            var width = nDropdown.width();

                            var windowWidth = $(window).width();
                            var margin = 15;

                            if( offset.left + width + margin > windowWidth ) {
                                var left = windowWidth - width - offset.left - margin;
                                nDropdown.css("left", left + "px");
                            }
                        });
                    },
                    onBlur: function() {
                        origin.value = $sn.summernote('code');
                    },
                    onBlurCodeview: function() {
                        origin.value = $sn.summernote('code');
                    },
                    
                    onImageUpload: function(files) {
                        // custom attachment data
                        var attachmentData = origin.dataset;
                        $nImageInput = $nEditor.find('.note-image-input');
                        $nImageInput.fileupload();
                        var jqXHR = $nImageInput.fileupload('send', 
                            {
                                files: files,
                                formData: $.extend({csrfmiddlewaretoken: csrftoken}, attachmentData),
                                url: settings.url.upload_attachment,
                            })
                            .done(function (data, textStatus, jqXHR) {
                                $.each(data.files, function (index, file) {
                                    $sn.summernote("insertImage", file.url);
                                });
                            })
                            .fail(function (jqXHR, textStatus, errorThrown) {
                                // if the error message from the server has any text in it, show it
                                var msg = jqXHR.responseJSON;
                                if (msg && msg.message) {
                                    alert(msg.message);
                                }
                                // otherwise, show something generic
                                else {
                                    alert('Got an error while uploading images.');
                                }
                            });
                        // Summernote will replace ImageInput when next the dialog opens.
                        // But we have to reset it to prevent additional uploading by form itself.
                        $nImageInput.replaceWith($nImageInput.val('').clone(true));
                    }
                    
                }
            }));
        };

        // include summernote language pack, synchronously
        $.ajax({url: settings.url.language, dataType: "script", complete: initEditor})

        // For CodeMirror
        $sn.on('summernote.codeview.toggled', function() {
            var cmEditor = $nCodable.data('cmEditor');
            if( cmEditor ) {
                cmEditor.on('blur', function() {
                    origin.value = cmEditor.getValue();
                });
            }
        });


        // See https://docs.djangoproject.com/en/dev/ref/contrib/csrf/#ajax
        function getCookie(name) {
            var cookieValue = null;
            if (document.cookie && document.cookie != '') {
                var cookies = document.cookie.split(';');
                for (var i = 0; i < cookies.length; i++) {
                    var cookie = jQuery.trim(cookies[i]);
                    // Does this cookie string begin with the name we want?
                    if (cookie.substring(0, name.length + 1) == (name + '=')) {
                        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                        break;
                    }
                }
            }
            return cookieValue;
        }

    });
}
</script>

<script>

    initSummernote_id_body();

</script>
</td></tr>
INFO 2021-05-25 15:41:55,270 views <QueryDict: {'csrfmiddlewaretoken': ['jF0zEmEra5KritUt6AD2pKz2YrQ6tbLx7tpSfHaFGLKVDaHxKd6eCoJ83anFEHs5'], 'body': ['<p>dsad</p><p>sad</p><p>sad</p><p>sad</p><p>sa</p><p>d</p><p>sa</p><p>d</p>'], 'files': ['']}>
INFO 2021-05-25 15:42:42,031 views <tr><th><label for="id_body">Body:</label></th><td><textarea name="body" cols="40" rows="10" name="editordata" id="id_body" hidden="true">
&lt;p&gt;kmhjlgj&lt;/p&gt;</textarea><script>
function initSummernote_id_body() {
    $(document).ready(function($) {

        var origin = window.document.getElementById('id_body');
        var csrftoken = getCookie('csrftoken');
        var settings = {"height": "200", "codemirror": {"mode": "htmlmixed", "lineNumbers": "true", "theme": "monokai"}, "toolbar": [["font", ["bold", "underline", "clear"]], ["color", ["color"]], ["para", ["ul", "ol"]], ["insert", ["link", "picture", "video"]], ["view", ["fullscreen", "codeview", "help"]]], "width": 720, "lang": "en-US", "url": {"language": "/static/summernote/lang/summernote-en-US.min.js", "upload_attachment": "/summernote/upload_attachment/"}};
        var $sn = $(origin);

        $sn.html(origin.value);
        var $nEditor, $nCodable, $nImageInput;
        $(origin).hide();

        function recalcHeight(e) {
            var nEditable = e.find('.note-editable');
            var nEditor = $('.note-editor');
            var height = parseInt(
                parseInt(settings.height)  // default
                - e.find('.note-toolbar').outerHeight()
                - e.find('.note-status-output').outerHeight()
                - e.find('.note-statusbar').outerHeight()
                - (nEditor.outerHeight() - nEditor.innerHeight())  // editor's border
            );
            nEditable.outerHeight(height);
        }
        
        var initEditor = function() {
            $sn.summernote($.extend(settings, {

                callbacks: {
                    onInit: function() {
                        $nEditor = $sn.next();
                        $nCodable = $nEditor.find('.note-codable');
                        recalcHeight($nEditor);


                        // Apply attributes with wrapper div
                        var $wrap = $($nEditor).wrap(
                            '<div class="summernote-div"></div>'
                        ).parent();
                        
                        $wrap.attr('cols', '40');
                        
                        $wrap.attr('rows', '10');
                        
                        $wrap.attr('name', 'editordata');
                        


                        // Move dropdown dialog when it exceeds the bound of the editor
                        $nEditor.find('.note-btn-group').on('shown.bs.dropdown', function () {
                            var nDropdown = $(this).find(".dropdown-menu");
                            var offset = nDropdown.offset();
                            var width = nDropdown.width();

                            var windowWidth = $(window).width();
                            var margin = 15;

                            if( offset.left + width + margin > windowWidth ) {
                                var left = windowWidth - width - offset.left - margin;
                                nDropdown.css("left", left + "px");
                            }
                        });
                    },
                    onBlur: function() {
                        origin.value = $sn.summernote('code');
                    },
                    onBlurCodeview: function() {
                        origin.value = $sn.summernote('code');
                    },
                    
                    onImageUpload: function(files) {
                        // custom attachment data
                        var attachmentData = origin.dataset;
                        $nImageInput = $nEditor.find('.note-image-input');
                        $nImageInput.fileupload();
                        var jqXHR = $nImageInput.fileupload('send', 
                            {
                                files: files,
                                formData: $.extend({csrfmiddlewaretoken: csrftoken}, attachmentData),
                                url: settings.url.upload_attachment,
                            })
                            .done(function (data, textStatus, jqXHR) {
                                $.each(data.files, function (index, file) {
                                    $sn.summernote("insertImage", file.url);
                                });
                            })
                            .fail(function (jqXHR, textStatus, errorThrown) {
                                // if the error message from the server has any text in it, show it
                                var msg = jqXHR.responseJSON;
                                if (msg && msg.message) {
                                    alert(msg.message);
                                }
                                // otherwise, show something generic
                                else {
                                    alert('Got an error while uploading images.');
                                }
                            });
                        // Summernote will replace ImageInput when next the dialog opens.
                        // But we have to reset it to prevent additional uploading by form itself.
                        $nImageInput.replaceWith($nImageInput.val('').clone(true));
                    }
                    
                }
            }));
        };

        // include summernote language pack, synchronously
        $.ajax({url: settings.url.language, dataType: "script", complete: initEditor})

        // For CodeMirror
        $sn.on('summernote.codeview.toggled', function() {
            var cmEditor = $nCodable.data('cmEditor');
            if( cmEditor ) {
                cmEditor.on('blur', function() {
                    origin.value = cmEditor.getValue();
                });
            }
        });


        // See https://docs.djangoproject.com/en/dev/ref/contrib/csrf/#ajax
        function getCookie(name) {
            var cookieValue = null;
            if (document.cookie && document.cookie != '') {
                var cookies = document.cookie.split(';');
                for (var i = 0; i < cookies.length; i++) {
                    var cookie = jQuery.trim(cookies[i]);
                    // Does this cookie string begin with the name we want?
                    if (cookie.substring(0, name.length + 1) == (name + '=')) {
                        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                        break;
                    }
                }
            }
            return cookieValue;
        }

    });
}
</script>

<script>

    initSummernote_id_body();

</script>
</td></tr>
INFO 2021-05-25 15:42:42,060 views <QueryDict: {'csrfmiddlewaretoken': ['hIUtONqgdcIepew5mzFrXmzSn33flsqA5wjMp8WuJSIIKVj90c8Da0JYsMAOwY78'], 'body': ['<p>kmhjlgj</p>'], 'files': ['']}>
INFO 2021-05-25 15:43:05,187 views <tr><th><label for="id_body">Body:</label></th><td><textarea name="body" cols="40" rows="10" name="editordata" id="id_body" hidden="true">
&lt;p&gt;sdasd&lt;/p&gt;&lt;p&gt;sadsdsd&lt;img src=&quot;https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRFKXLp_smWjkv2aRceKK8FRMuCLyPqPrRA6Q&amp;amp;usqp=CAU&quot; style=&quot;width: 300px;&quot;&gt;&lt;/p&gt;</textarea><script>
function initSummernote_id_body() {
    $(document).ready(function($) {

        var origin = window.document.getElementById('id_body');
        var csrftoken = getCookie('csrftoken');
        var settings = {"height": "200", "codemirror": {"mode": "htmlmixed", "lineNumbers": "true", "theme": "monokai"}, "toolbar": [["font", ["bold", "underline", "clear"]], ["color", ["color"]], ["para", ["ul", "ol"]], ["insert", ["link", "picture", "video"]], ["view", ["fullscreen", "codeview", "help"]]], "width": 720, "lang": "en-US", "url": {"language": "/static/summernote/lang/summernote-en-US.min.js", "upload_attachment": "/summernote/upload_attachment/"}};
        var $sn = $(origin);

        $sn.html(origin.value);
        var $nEditor, $nCodable, $nImageInput;
        $(origin).hide();

        function recalcHeight(e) {
            var nEditable = e.find('.note-editable');
            var nEditor = $('.note-editor');
            var height = parseInt(
                parseInt(settings.height)  // default
                - e.find('.note-toolbar').outerHeight()
                - e.find('.note-status-output').outerHeight()
                - e.find('.note-statusbar').outerHeight()
                - (nEditor.outerHeight() - nEditor.innerHeight())  // editor's border
            );
            nEditable.outerHeight(height);
        }
        
        var initEditor = function() {
            $sn.summernote($.extend(settings, {

                callbacks: {
                    onInit: function() {
                        $nEditor = $sn.next();
                        $nCodable = $nEditor.find('.note-codable');
                        recalcHeight($nEditor);


                        // Apply attributes with wrapper div
                        var $wrap = $($nEditor).wrap(
                            '<div class="summernote-div"></div>'
                        ).parent();
                        
                        $wrap.attr('cols', '40');
                        
                        $wrap.attr('rows', '10');
                        
                        $wrap.attr('name', 'editordata');
                        


                        // Move dropdown dialog when it exceeds the bound of the editor
                        $nEditor.find('.note-btn-group').on('shown.bs.dropdown', function () {
                            var nDropdown = $(this).find(".dropdown-menu");
                            var offset = nDropdown.offset();
                            var width = nDropdown.width();

                            var windowWidth = $(window).width();
                            var margin = 15;

                            if( offset.left + width + margin > windowWidth ) {
                                var left = windowWidth - width - offset.left - margin;
                                nDropdown.css("left", left + "px");
                            }
                        });
                    },
                    onBlur: function() {
                        origin.value = $sn.summernote('code');
                    },
                    onBlurCodeview: function() {
                        origin.value = $sn.summernote('code');
                    },
                    
                    onImageUpload: function(files) {
                        // custom attachment data
                        var attachmentData = origin.dataset;
                        $nImageInput = $nEditor.find('.note-image-input');
                        $nImageInput.fileupload();
                        var jqXHR = $nImageInput.fileupload('send', 
                            {
                                files: files,
                                formData: $.extend({csrfmiddlewaretoken: csrftoken}, attachmentData),
                                url: settings.url.upload_attachment,
                            })
                            .done(function (data, textStatus, jqXHR) {
                                $.each(data.files, function (index, file) {
                                    $sn.summernote("insertImage", file.url);
                                });
                            })
                            .fail(function (jqXHR, textStatus, errorThrown) {
                                // if the error message from the server has any text in it, show it
                                var msg = jqXHR.responseJSON;
                                if (msg && msg.message) {
                                    alert(msg.message);
                                }
                                // otherwise, show something generic
                                else {
                                    alert('Got an error while uploading images.');
                                }
                            });
                        // Summernote will replace ImageInput when next the dialog opens.
                        // But we have to reset it to prevent additional uploading by form itself.
                        $nImageInput.replaceWith($nImageInput.val('').clone(true));
                    }
                    
                }
            }));
        };

        // include summernote language pack, synchronously
        $.ajax({url: settings.url.language, dataType: "script", complete: initEditor})

        // For CodeMirror
        $sn.on('summernote.codeview.toggled', function() {
            var cmEditor = $nCodable.data('cmEditor');
            if( cmEditor ) {
                cmEditor.on('blur', function() {
                    origin.value = cmEditor.getValue();
                });
            }
        });


        // See https://docs.djangoproject.com/en/dev/ref/contrib/csrf/#ajax
        function getCookie(name) {
            var cookieValue = null;
            if (document.cookie && document.cookie != '') {
                var cookies = document.cookie.split(';');
                for (var i = 0; i < cookies.length; i++) {
                    var cookie = jQuery.trim(cookies[i]);
                    // Does this cookie string begin with the name we want?
                    if (cookie.substring(0, name.length + 1) == (name + '=')) {
                        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                        break;
                    }
                }
            }
            return cookieValue;
        }

    });
}
</script>

<script>

    initSummernote_id_body();

</script>
</td></tr>
INFO 2021-05-25 15:43:05,211 views <QueryDict: {'csrfmiddlewaretoken': ['xhlVeIZbEQu1CV1NgN4uikXLxgrRs2DFl5KeP3vpawuvXCORUqxGvY7RCZYqDykd'], 'body': ['<p>sdasd</p><p>sadsdsd<img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRFKXLp_smWjkv2aRceKK8FRMuCLyPqPrRA6Q&amp;usqp=CAU" style="width: 300px;"></p>'], 'files': ['']}>
INFO 2021-05-25 15:59:24,411 views <QueryDict: {'csrfmiddlewaretoken': ['OIA9lVGDssmrCw4DqOsFK7533DsKyaGVNkc5bvPhr5xxmeqZ13O49QCmGbPUrdjv'], 'body': ['']}>
INFO 2021-05-25 15:59:54,411 views <QueryDict: {'csrfmiddlewaretoken': ['OIA9lVGDssmrCw4DqOsFK7533DsKyaGVNkc5bvPhr5xxmeqZ13O49QCmGbPUrdjv'], 'body': ['']}>
INFO 2021-05-25 23:30:54,127 utils t's still
INFO 2021-05-25 23:30:54,138 utils asdasd
INFO 2021-05-25 23:30:54,152 utils re likely
INFO 2021-05-25 23:30:54,156 utils t. Longer
INFO 2021-05-25 23:32:20,863 utils t's still
INFO 2021-05-25 23:32:20,865 utils 3775
INFO 2021-05-25 23:32:20,867 utils asdasd
INFO 2021-05-25 23:32:20,869 utils 0
INFO 2021-05-25 23:32:20,878 utils re likely
INFO 2021-05-25 23:32:20,879 utils 301
INFO 2021-05-25 23:32:20,884 utils t. Longer
INFO 2021-05-25 23:33:50,687 utils t's still
INFO 2021-05-25 23:33:50,688 utils 3775
INFO 2021-05-25 23:33:50,688 utils asdasd
INFO 2021-05-25 23:33:50,688 utils 0
INFO 2021-05-25 23:33:50,692 utils re likely
INFO 2021-05-25 23:33:50,693 utils 301
INFO 2021-05-25 23:33:50,694 utils t. Longer
INFO 2021-05-25 23:33:59,281 utils t's still
INFO 2021-05-25 23:33:59,287 utils 3775
INFO 2021-05-25 23:33:59,290 utils asdasd
INFO 2021-05-25 23:33:59,293 utils 0
INFO 2021-05-25 23:33:59,318 utils re likely
INFO 2021-05-25 23:33:59,320 utils 301
INFO 2021-05-25 23:33:59,335 utils t. Longer
